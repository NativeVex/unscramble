'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var QueryResults = (function (_Component) {
  _inherits(QueryResults, _Component);

  _createClass(QueryResults, null, [{
    key: 'propTypes',
    value: {
      onFocus: _react.PropTypes.func,
      onBlur: _react.PropTypes.func,
      result: _react.PropTypes.any
    },
    enumerable: true
  }, {
    key: 'contextTypes',
    value: {
      theme: _react.PropTypes.object.isRequired
    },
    enumerable: true
  }]);

  function QueryResults(props) {
    _classCallCheck(this, QueryResults);

    _get(Object.getPrototypeOf(QueryResults.prototype), 'constructor', this).call(this, props);

    this.state = { focused: false };
  }

  _createClass(QueryResults, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.refs.textarea.setScrollPerc(0);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.refs.textarea.setScrollPerc(0);
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus() {
      this.refs.textarea.readInput();
      this.setState({ focused: true });
      if (this.props.onFocus) this.props.onFocus();
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur() {
      this.setState({ focused: false });
      if (this.props.onBlur) this.props.onBlur();
    }
  }, {
    key: 'handleKeypress',
    value: function handleKeypress(ch, info) {
      switch (info.full) {
        case 'tab':
          this.refs.textarea.screen.focusNext();
          break;
        case 'S-tab':
          this.refs.textarea.screen.focusPrev();
          break;
        default:
          return false;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var result = this.props.result;
      var theme = this.context.theme;

      var content = 'no results';

      if (result) {
        var rows = result.rows;
        var fields = result.fields;

        if (fields) {
          (function () {
            var data = [];
            var colsMax = fields.map(function () {
              return 0;
            });

            for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {
              var row = rows[rowIndex];
              data.push([]);
              for (var colIndex = 0; colIndex < fields.length; colIndex++) {
                var field = fields[colIndex];

                var value = row[field.name];
                if (value === null) value = 'null';
                if (value === undefined) value = 'undefined';
                value = value.toString();

                colsMax[colIndex] = colsMax[colIndex] < value.length ? value.length : colsMax[colIndex];

                data[rowIndex].push(value);
              }
            }
            data.unshift([]);
            for (var colIndex = 0; colIndex < fields.length; colIndex++) {
              var field = fields[colIndex];
              var value = field.name;
              data[0].push(value);
              colsMax[colIndex] = colsMax[colIndex] < value.length ? value.length : colsMax[colIndex];
            }
            content = data.map(function (row) {
              return row.map(function (col, index) {
                var spaces = new Array(colsMax[index] - col.length + 2).join(' ');
                return col + spaces;
              }).join(' ');
            }).join('\n');
          })();
        }
      }

      return _react2['default'].createElement(
        'box',
        {
          border: 'line',
          label: ' Result ',
          style: this.state.focused ? (0, _lodash.merge)({}, theme.box.normal, theme.box.focus) : theme.box.normal
        },
        _react2['default'].createElement('textarea', {
          mouse: true, keys: true, scrollbar: true,
          ref: 'textarea',
          style: theme.box.normal,
          onFocus: this.handleFocus.bind(this),
          onBlur: this.handleBlur.bind(this),
          onKeypress: this.handleKeypress.bind(this),
          value: content
        })
      );
    }
  }]);

  return QueryResults;
})(_react.Component);

exports['default'] = QueryResults;
module.exports = exports['default'];