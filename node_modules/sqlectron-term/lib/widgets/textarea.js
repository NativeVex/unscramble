'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var Textarea = (function (_Component) {
  _inherits(Textarea, _Component);

  _createClass(Textarea, null, [{
    key: 'propTypes',
    value: {
      defaultValue: _react.PropTypes.string,
      // events
      onFocus: _react.PropTypes.func,
      onBlur: _react.PropTypes.func,
      onKeypress: _react.PropTypes.func
    },
    enumerable: true
  }, {
    key: 'contextTypes',
    value: {
      theme: _react.PropTypes.object.isRequired
    },
    enumerable: true
  }]);

  function Textarea(props) {
    _classCallCheck(this, Textarea);

    _get(Object.getPrototypeOf(Textarea.prototype), 'constructor', this).call(this, props);

    this.state = { value: props.defaultValue || '', focused: false };
  }

  _createClass(Textarea, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.defaultValue !== this.state.value) {
        this.setState({ value: nextProps.defaultValue });
      }
    }
  }, {
    key: 'setValue',
    value: function setValue(value) {
      this.setState({ value: value });
    }
  }, {
    key: 'getValue',
    value: function getValue() {
      return this.state.value;
    }
  }, {
    key: 'focus',
    value: function focus() {
      this.refs.textarea.focus();
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus() {
      this.refs.textarea.readInput();
      this.setState({ focused: true });
      if (this.props.onFocus) this.props.onFocus(this);
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur() {
      this.setState({ focused: false });
      if (this.props.onBlur) this.props.onBlur(this);
    }
  }, {
    key: 'handleKeypress',
    value: function handleKeypress(ch, info) {
      var value = this.refs.textarea.value;
      if (value !== this.state.value) this.setState({ value: value });

      if (this.props.onKeypress) this.props.onKeypress(ch, info);

      switch (info.full) {
        case 'tab':
          this.refs.textarea.screen.focusNext();
          break;
        case 'S-tab':
          this.refs.textarea.screen.focusPrev();
          break;
        default:
          return false;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var theme = this.context.theme;

      return _react2['default'].createElement('textarea', {
        keys: true, mouse: true,
        ref: 'textarea',
        border: 'line',
        style: this.state.focused ? (0, _lodash.merge)({}, theme.box.normal, theme.box.focus) : theme.box.normal,
        onFocus: this.handleFocus.bind(this),
        onBlur: this.handleBlur.bind(this),
        onKeypress: this.handleKeypress.bind(this),
        value: this.state.value
      });
    }
  }]);

  return Textarea;
})(_react.Component);

exports['default'] = Textarea;
module.exports = exports['default'];