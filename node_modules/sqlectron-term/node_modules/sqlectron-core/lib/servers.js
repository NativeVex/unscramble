'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.prepareConfiguration = prepareConfiguration;
exports.getAll = getAll;
exports.add = add;
exports.update = update;
exports.addOrUpdate = addOrUpdate;
exports.removeById = removeById;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

var _nodeUuid = require('node-uuid');

var _nodeUuid2 = _interopRequireDefault(_nodeUuid);

var _validatorsServer = require('./validators/server');

var _utils = require('./utils');

function prepareConfiguration() {
  var filename, result;
  return regeneratorRuntime.async(function prepareConfiguration$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        filename = (0, _utils.getConfigPath)();
        context$1$0.next = 3;
        return regeneratorRuntime.awrap((0, _utils.fileExists)(filename));

      case 3:
        if (context$1$0.sent) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 6;
        return regeneratorRuntime.awrap((0, _utils.writeJSONFile)(filename, { servers: [] }));

      case 6:
        context$1$0.next = 8;
        return regeneratorRuntime.awrap((0, _utils.readJSONFile)(filename));

      case 8:
        result = context$1$0.sent;

        result.servers = result.servers.map(function (srv) {
          if (!srv.id) {
            srv.id = _nodeUuid2['default'].v4();
          }
          return srv;
        });
        context$1$0.next = 12;
        return regeneratorRuntime.awrap((0, _utils.writeJSONFile)(filename, result));

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

// TODO: Validate whole configuration file
// if (!serversValidate(result)) {
//   throw new Error('Invalid ~/.sqlectron.json file format');
// }

function getAll() {
  var filename, result;
  return regeneratorRuntime.async(function getAll$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        filename = (0, _utils.getConfigPath)();
        context$1$0.next = 3;
        return regeneratorRuntime.awrap((0, _utils.readJSONFile)(filename));

      case 3:
        result = context$1$0.sent;
        return context$1$0.abrupt('return', result);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function add(server) {
  var filename, data, newId;
  return regeneratorRuntime.async(function add$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return regeneratorRuntime.awrap((0, _validatorsServer.validate)(server));

      case 2:
        filename = (0, _utils.getConfigPath)();
        context$1$0.next = 5;
        return regeneratorRuntime.awrap((0, _utils.readJSONFile)(filename));

      case 5:
        data = context$1$0.sent;
        newId = _nodeUuid2['default'].v4();

        (0, _validatorsServer.validateUniqueId)(data.servers, newId);

        server.id = newId;
        data.servers.push(server);
        context$1$0.next = 12;
        return regeneratorRuntime.awrap((0, _utils.writeJSONFile)(filename, data));

      case 12:
        return context$1$0.abrupt('return', server);

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function update(server) {
  var filename, data, index;
  return regeneratorRuntime.async(function update$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return regeneratorRuntime.awrap((0, _validatorsServer.validate)(server));

      case 2:
        filename = (0, _utils.getConfigPath)();
        context$1$0.next = 5;
        return regeneratorRuntime.awrap((0, _utils.readJSONFile)(filename));

      case 5:
        data = context$1$0.sent;

        (0, _validatorsServer.validateUniqueId)(data.servers, server.id);

        index = data.servers.findIndex(function (srv) {
          return srv.id === server.id;
        });

        data.servers = [].concat(_toConsumableArray(data.servers.slice(0, index)), [server], _toConsumableArray(data.servers.slice(index + 1)));

        context$1$0.next = 11;
        return regeneratorRuntime.awrap((0, _utils.writeJSONFile)(filename, data));

      case 11:
        return context$1$0.abrupt('return', server);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function addOrUpdate(server) {
  var hasId;
  return regeneratorRuntime.async(function addOrUpdate$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        hasId = !!(server.id && (server.id + '').length);
        return context$1$0.abrupt('return', hasId ? update(server) : add(server));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function removeById(id) {
  var filename, data, index;
  return regeneratorRuntime.async(function removeById$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        filename = (0, _utils.getConfigPath)();
        context$1$0.next = 3;
        return regeneratorRuntime.awrap((0, _utils.readJSONFile)(filename));

      case 3:
        data = context$1$0.sent;
        index = data.servers.findIndex(function (srv) {
          return srv.id === id;
        });

        data.servers = [].concat(_toConsumableArray(data.servers.slice(0, index)), _toConsumableArray(data.servers.slice(index + 1)));

        context$1$0.next = 8;
        return regeneratorRuntime.awrap((0, _utils.writeJSONFile)(filename, data));

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

// TODO: Add validation to check if the current id is a valid uuid