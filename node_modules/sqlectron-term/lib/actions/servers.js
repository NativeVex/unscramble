'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.fetchServersIfNeeded = fetchServersIfNeeded;
exports.prepareSaveServer = prepareSaveServer;
exports.saveServer = saveServer;
exports.removeServer = removeServer;

var _sqlectronCore = require('sqlectron-core');

var FETCH_SERVERS_REQUEST = 'FETCH_SERVERS_REQUEST';
exports.FETCH_SERVERS_REQUEST = FETCH_SERVERS_REQUEST;
var FETCH_SERVERS_SUCCESS = 'FETCH_SERVERS_SUCCESS';
exports.FETCH_SERVERS_SUCCESS = FETCH_SERVERS_SUCCESS;
var FETCH_SERVERS_FAILURE = 'FETCH_SERVERS_FAILURE';

exports.FETCH_SERVERS_FAILURE = FETCH_SERVERS_FAILURE;
var SAVE_SERVER_PREPARE = 'SAVE_SERVER_PREPARE';
exports.SAVE_SERVER_PREPARE = SAVE_SERVER_PREPARE;
var SAVE_SERVER_REQUEST = 'SAVE_SERVER_REQUEST';
exports.SAVE_SERVER_REQUEST = SAVE_SERVER_REQUEST;
var SAVE_SERVER_SUCCESS = 'SAVE_SERVER_SUCCESS';
exports.SAVE_SERVER_SUCCESS = SAVE_SERVER_SUCCESS;
var SAVE_SERVER_FAILURE = 'SAVE_SERVER_FAILURE';

exports.SAVE_SERVER_FAILURE = SAVE_SERVER_FAILURE;
var REMOVE_SERVER = 'REMOVE_SERVER';

exports.REMOVE_SERVER = REMOVE_SERVER;

function fetchServersIfNeeded() {
  return function (dispatch, getState) {
    if (shouldFetchServers(getState())) {
      return dispatch(fetchServers());
    }
  };
}

function shouldFetchServers(state) {
  var servers = state.servers;
  if (!servers) return true;
  if (servers.isFetching) return false;
  return servers.didInvalidate;
}

function fetchServers() {
  var _this = this;

  return function callee$1$0(dispatch) {
    var data;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          dispatch({ type: FETCH_SERVERS_REQUEST });
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(_sqlectronCore.servers.prepareConfiguration());

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(_sqlectronCore.servers.getAll());

        case 6:
          data = context$2$0.sent;

          dispatch({
            type: FETCH_SERVERS_SUCCESS,
            servers: data.servers
          });
          context$2$0.next = 13;
          break;

        case 10:
          context$2$0.prev = 10;
          context$2$0.t0 = context$2$0['catch'](1);

          dispatch({ type: FETCH_SERVERS_FAILURE, error: context$2$0.t0 });

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[1, 10]]);
  };
}

function prepareSaveServer(server) {
  return {
    type: SAVE_SERVER_PREPARE,
    server: server
  };
}

function saveServer(server) {
  var _this2 = this;

  return function callee$1$0(dispatch) {
    var saved;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          dispatch({ type: SAVE_SERVER_REQUEST, server: server });
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(_sqlectronCore.servers.addOrUpdate(server));

        case 4:
          saved = context$2$0.sent;

          dispatch({
            type: SAVE_SERVER_SUCCESS,
            server: saved
          });
          context$2$0.next = 11;
          break;

        case 8:
          context$2$0.prev = 8;
          context$2$0.t0 = context$2$0['catch'](1);

          dispatch({ type: SAVE_SERVER_FAILURE, error: context$2$0.t0 });

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2, [[1, 8]]);
  };
}

function removeServer(id) {
  var _this3 = this;

  return function callee$1$0(dispatch) {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.prev = 0;
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_sqlectronCore.servers.removeById(id));

        case 3:
          context$2$0.prev = 3;

          dispatch({ type: REMOVE_SERVER, id: id });
          return context$2$0.finish(3);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this3, [[0,, 3, 6]]);
  };
}