'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _Object$keys = require('babel-runtime/core-js/object/keys')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var ServerForm = (function (_Component) {
  _inherits(ServerForm, _Component);

  _createClass(ServerForm, null, [{
    key: 'propTypes',
    value: {
      onSubmit: _react.PropTypes.func,
      onCancel: _react.PropTypes.func,
      onFocus: _react.PropTypes.func,
      server: _react.PropTypes.object,
      error: _react.PropTypes.object
    },
    enumerable: true
  }, {
    key: 'contextTypes',
    value: {
      theme: _react.PropTypes.object.isRequired
    },
    enumerable: true
  }]);

  function ServerForm(props) {
    _classCallCheck(this, ServerForm);

    _get(Object.getPrototypeOf(ServerForm.prototype), 'constructor', this).call(this, props);

    this.state = { server: props.server };
  }

  _createClass(ServerForm, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.refs.form.focusNext();

      this.refs.mysql.uncheck();
      this.refs.postgresql.uncheck();
      if (this.state.server && this.state.server.client) {
        this.refs[this.state.server.client].check();
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.server !== nextProps.server) {
        this.setState({ server: nextProps.server });
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.refs.mysql.uncheck();
      this.refs.postgresql.uncheck();
      if (this.state.server && this.state.server.client) {
        this.refs[this.state.server.client].check();
      }
    }
  }, {
    key: 'onFocus',
    value: function onFocus(name) {
      if (this.props.onFocus) this.props.onFocus(name);
    }
  }, {
    key: 'handleSubmit',
    value: function handleSubmit(data) {
      var server = {};

      var clients = ['mysql', 'postgresql'];
      _Object$keys(data).filter(function (key) {
        return data[key];
      }) // ignore falsy
      .filter(function (key) {
        return key.split('ssh.').length === 1;
      }) // ignore ssh
      .forEach(function (key) {
        if (clients.includes(key)) return;
        server[key] = data[key];
      });

      server.client = clients.find(function (client) {
        return data[client];
      });

      if (this.props.server && this.props.server.id) {
        server.id = this.props.server.id;
      }

      _Object$keys(data).filter(function (key) {
        return data[key];
      }) // ignore falsy
      .map(function (key) {
        return key.split('ssh.');
      }).filter(function (keys) {
        return keys.length > 1;
      }).map(function (keys) {
        return keys[1];
      }).forEach(function (key) {
        server.ssh = server.ssh || {};
        server.ssh = _extends({}, server.ssh, _defineProperty({}, key, data['ssh.' + key]));
      });

      if (this.props.onSubmit) this.props.onSubmit(server);

      this.refs.form.focusNext();
    }
  }, {
    key: 'handleButtonSubmit',
    value: function handleButtonSubmit() {
      this.refs.form.submit();
    }
  }, {
    key: 'handleKeypress',
    value: function handleKeypress(ch, key) {
      if (key.full === 'escape' && this.props.onCancel) this.props.onCancel();
    }
  }, {
    key: 'render',
    value: function render() {
      var server = this.state.server;
      var theme = this.context.theme;

      var styles = (0, _lodash.merge)({}, theme.box.normal, theme.box.focus);

      return _react2['default'].createElement(
        'box',
        {
          border: 'line',
          label: server && server.id ? ' Edit server ' : ' Add server ',
          style: styles,
          position: { left: 0, right: 0, top: 0, bottom: 0 }
        },
        _react2['default'].createElement(
          'form',
          {
            keys: true,
            ref: 'form',
            onSubmit: this.handleSubmit.bind(this),
            style: styles,
            position: { left: 1, right: 1, top: 1, bottom: 1 }
          },
          _react2['default'].createElement(
            'box',
            { border: 'line', width: 36, label: ' Database Server ', style: styles },
            _react2['default'].createElement(
              'box',
              { position: { left: 1, top: 1, right: 1, bottom: 1 }, style: styles },
              _react2['default'].createElement(
                'box',
                { position: { left: 0, top: 0, height: 2 }, style: styles },
                _react2['default'].createElement('text', {
                  position: { left: 0 },
                  content: 'Name:',
                  style: styles
                }),
                _react2['default'].createElement('textbox', {
                  keys: true, inputOnFocus: true,
                  position: { left: 6, height: 1 },
                  ref: 'name',
                  name: 'name',
                  value: server && server.name || '',
                  onFocus: this.onFocus.bind(this, 'name'),
                  onKeypress: this.handleKeypress.bind(this)
                })
              ),
              _react2['default'].createElement(
                'box',
                { position: { left: 0, top: 2, height: 2 }, style: styles },
                _react2['default'].createElement(
                  'radioset',
                  { style: styles },
                  _react2['default'].createElement('text', {
                    position: { left: 0, top: 0 },
                    content: 'Client:',
                    style: styles
                  }),
                  _react2['default'].createElement('radiobutton', {
                    keys: true,
                    name: 'mysql',
                    position: { left: 8, top: 0 },
                    style: styles,
                    value: server && server.client === 'mysql',
                    content: 'MySQL',
                    ref: 'mysql',
                    onKeypress: this.handleKeypress.bind(this)
                  }),
                  _react2['default'].createElement('radiobutton', {
                    keys: true,
                    name: 'postgresql',
                    position: { left: 18, top: 0 },
                    style: styles,
                    value: server && server.client === 'postgresql',
                    content: 'PostgreSQL',
                    ref: 'postgresql',
                    onKeypress: this.handleKeypress.bind(this)
                  })
                )
              ),
              _react2['default'].createElement(
                'box',
                { position: { left: 0, top: 4, height: 2 }, style: styles },
                _react2['default'].createElement('text', {
                  position: { left: 0 },
                  content: 'Port:',
                  style: styles
                }),
                _react2['default'].createElement('textbox', {
                  keys: true, inputOnFocus: true,
                  position: { left: 6, width: 6, height: 1 },
                  ref: 'port',
                  name: 'port',
                  value: server && server.port && server.port.toString() || '',
                  onFocus: this.onFocus.bind(this, 'port'),
                  onKeypress: this.handleKeypress.bind(this)
                }),
                _react2['default'].createElement('text', {
                  position: { left: 13 },
                  content: 'Host:',
                  style: styles
                }),
                _react2['default'].createElement('textbox', {
                  keys: true, inputOnFocus: true,
                  position: { left: 19, height: 1 },
                  ref: 'host',
                  name: 'host',
                  value: server && server.host || '',
                  onFocus: this.onFocus.bind(this, 'host'),
                  onKeypress: this.handleKeypress.bind(this)
                })
              ),
              _react2['default'].createElement(
                'box',
                { position: { left: 0, top: 6, height: 2 }, style: styles },
                _react2['default'].createElement('text', {
                  position: { left: 0 },
                  content: 'Unix Socket:',
                  style: styles
                }),
                _react2['default'].createElement('textbox', {
                  keys: true, inputOnFocus: true,
                  position: { left: 13, height: 1 },
                  ref: 'socketPath',
                  name: 'socketPath',
                  value: server && server.socketPath || '',
                  onFocus: this.onFocus.bind(this, 'socketPath'),
                  onKeypress: this.handleKeypress.bind(this)
                })
              ),
              _react2['default'].createElement(
                'box',
                { position: { left: 0, top: 8, height: 2 }, style: styles },
                _react2['default'].createElement('text', {
                  position: { left: 0 },
                  content: 'User:',
                  style: styles
                }),
                _react2['default'].createElement('textbox', {
                  keys: true, inputOnFocus: true,
                  position: { left: 6, height: 1 },
                  ref: 'user',
                  name: 'user',
                  value: server && server.user || '',
                  onFocus: this.onFocus.bind(this, 'user'),
                  onKeypress: this.handleKeypress.bind(this)
                })
              ),
              _react2['default'].createElement(
                'box',
                { position: { left: 0, top: 10, height: 2 }, style: styles },
                _react2['default'].createElement('text', {
                  position: { left: 0 },
                  content: 'Password:',
                  style: styles
                }),
                _react2['default'].createElement('textbox', {
                  censor: true, keys: true, inputOnFocus: true,
                  position: { left: 10, height: 1 },
                  ref: 'password',
                  name: 'password',
                  value: server && server.password || '',
                  onFocus: this.onFocus.bind(this, 'password'),
                  onKeypress: this.handleKeypress.bind(this)
                })
              ),
              _react2['default'].createElement(
                'box',
                { position: { left: 0, top: 12, height: 2 }, style: styles },
                _react2['default'].createElement('text', {
                  position: { left: 0 },
                  content: 'Database:',
                  style: styles
                }),
                _react2['default'].createElement('textbox', {
                  keys: true, inputOnFocus: true,
                  position: { left: 10, height: 1 },
                  ref: 'database',
                  name: 'database',
                  value: server && server.database || '',
                  onFocus: this.onFocus.bind(this, 'database'),
                  onKeypress: this.handleKeypress.bind(this)
                })
              )
            )
          ),
          _react2['default'].createElement(
            'box',
            {
              position: { left: 36, top: 0, height: 14 },
              border: 'line',
              style: styles,
              label: ' SSH Tunnel ' },
            _react2['default'].createElement(
              'box',
              { position: { left: 1, top: 1, right: 1, bottom: 1 }, style: styles },
              _react2['default'].createElement(
                'box',
                { position: { left: 0, top: 0, height: 2 }, style: styles },
                _react2['default'].createElement('text', {
                  position: { left: 0 },
                  content: 'Port:',
                  style: styles
                }),
                _react2['default'].createElement('textbox', {
                  keys: true, inputOnFocus: true,
                  position: { left: 6, width: 6, height: 1 },
                  ref: 'ssh.port',
                  name: 'ssh.port',
                  value: server && server.ssh && server.ssh.port && server.ssh.port.toString() || '',
                  onFocus: this.onFocus.bind(this, 'ssh.port'),
                  onKeypress: this.handleKeypress.bind(this)
                }),
                _react2['default'].createElement('text', {
                  position: { left: 13 },
                  content: 'Host:',
                  style: styles
                }),
                _react2['default'].createElement('textbox', {
                  keys: true, inputOnFocus: true,
                  position: { left: 19, height: 1 },
                  ref: 'ssh.host',
                  name: 'ssh.host',
                  value: server && server.ssh && server.ssh.host || '',
                  onFocus: this.onFocus.bind(this, 'ssh.host'),
                  onKeypress: this.handleKeypress.bind(this)
                })
              ),
              _react2['default'].createElement(
                'box',
                { position: { left: 0, top: 2, height: 2 }, style: styles },
                _react2['default'].createElement('text', {
                  position: { left: 0 },
                  content: 'User:',
                  style: styles
                }),
                _react2['default'].createElement('textbox', {
                  keys: true, inputOnFocus: true,
                  position: { left: 6, height: 1 },
                  ref: 'ssh.user',
                  name: 'ssh.user',
                  value: server && server.ssh && server.ssh.user || '',
                  onFocus: this.onFocus.bind(this, 'ssh.user'),
                  onKeypress: this.handleKeypress.bind(this)
                })
              ),
              _react2['default'].createElement(
                'box',
                { position: { left: 0, top: 4, height: 2 }, style: styles },
                _react2['default'].createElement('text', {
                  position: { left: 0 },
                  content: 'Password:',
                  style: styles
                }),
                _react2['default'].createElement('textbox', {
                  keys: true, censor: true, inputOnFocus: true,
                  position: { left: 10, height: 1 },
                  ref: 'ssh.password',
                  name: 'ssh.password',
                  value: server && server.ssh && server.ssh.password || '',
                  onFocus: this.onFocus.bind(this, 'ssh.password'),
                  onKeypress: this.handleKeypress.bind(this)
                })
              ),
              _react2['default'].createElement(
                'box',
                { position: { left: 0, top: 6, height: 2 }, style: styles },
                _react2['default'].createElement('text', {
                  position: { left: 0 },
                  content: 'Private Key:',
                  style: styles
                }),
                _react2['default'].createElement('textbox', {
                  keys: true, inputOnFocus: true,
                  position: { left: 13, height: 1 },
                  ref: 'ssh.privateKey',
                  name: 'ssh.privateKey',
                  value: server && server.ssh && server.ssh.privateKey || '',
                  onFocus: this.onFocus.bind(this, 'ssh.privateKey'),
                  onKeypress: this.handleKeypress.bind(this)
                })
              )
            )
          ),
          _react2['default'].createElement(
            'box',
            {
              position: { left: 36, top: 14 },
              style: styles,
              border: 'line' },
            _react2['default'].createElement('button', {
              keys: true,
              position: { left: 1, height: 1, width: 8 },
              style: theme.button,
              onPress: this.handleButtonSubmit.bind(this),
              content: ' Submit ',
              onKeypress: this.handleKeypress.bind(this)
            })
          )
        )
      );
    }
  }]);

  return ServerForm;
})(_react.Component);

exports['default'] = ServerForm;
module.exports = exports['default'];