'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _actionsStatus = require('../actions/status');

var _actionsConnections = require('../actions/connections');

var Connection = (function (_Component) {
  _inherits(Connection, _Component);

  function Connection() {
    _classCallCheck(this, Connection);

    _get(Object.getPrototypeOf(Connection.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Connection, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.handleProps(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.handleProps(nextProps);
    }
  }, {
    key: 'handleProps',
    value: function handleProps(props) {
      var dispatch = props.dispatch;
      var params = props.params;
      var isConnecting = props.isConnecting;
      var isConnected = props.isConnected;
      var error = props.error;

      dispatch((0, _actionsConnections.connectIfNeeded)(params.id, params.database));

      if (error) return dispatch((0, _actionsStatus.setStatus)(error));
      if (isConnecting) return dispatch((0, _actionsStatus.setStatus)('Connecting to server...'));
      if (isConnected) return dispatch((0, _actionsStatus.setStatus)('Connection to server established'));
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var children = _props.children;
      var isConnected = _props.isConnected;
      var isSameServer = _props.isSameServer;

      if (!isConnected || !isSameServer) return _react2['default'].createElement('element', { hidden: true });

      return children;
    }
  }], [{
    key: 'propTypes',
    value: {
      dispatch: _react.PropTypes.func.isRequired,
      params: _react.PropTypes.object.isRequired,

      children: _react.PropTypes.element.isRequired,

      isConnecting: _react.PropTypes.bool,
      isConnected: _react.PropTypes.bool,
      error: _react.PropTypes.any,
      isSameServer: _react.PropTypes.bool.isRequired
    },
    enumerable: true
  }]);

  return Connection;
})(_react.Component);

function mapStateToProps(state, props) {
  var connections = state.connections;

  var isSameServer = connections && connections.server && connections.server.id === props.params.id && connections.database === props.params.database;

  return _extends({}, connections, { isSameServer: !!isSameServer });
}

exports['default'] = (0, _reactRedux.connect)(mapStateToProps)(Connection);
module.exports = exports['default'];