'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _reactRedux = require('react-redux');

var _actionsServers = require('../actions/servers');

var _actionsStatus = require('../actions/status');

var ServerRemove = (function (_Component) {
  _inherits(ServerRemove, _Component);

  function ServerRemove() {
    _classCallCheck(this, ServerRemove);

    _get(Object.getPrototypeOf(ServerRemove.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(ServerRemove, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this = this;

      var server = this.props.items.find(function (srv) {
        return srv.id === _this.props.params.id;
      });

      this.props.dispatch((0, _actionsStatus.setStatus)('Server "' + server.client + ' - ' + server.name + '" will be removed'));
    }
  }, {
    key: 'onPress',
    value: function onPress(choice) {
      if (choice === 'yes') {
        this.props.dispatch((0, _actionsServers.removeServer)(this.props.params.id));
      }
      this.context.history.goBack();
    }
  }, {
    key: 'handleKeypress',
    value: function handleKeypress(ch, key) {
      switch (key.full) {
        case 'tab':
          this.refs.box.screen.focusNext();
          break;
        case 'S-tab':
          this.refs.box.screen.focusPrev();
          break;
        default:
          return false;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var items = _props.items;
      var params = _props.params;
      var theme = this.context.theme;

      var server = items.find(function (srv) {
        return srv.id === params.id;
      });
      var styles = (0, _lodash.merge)({}, theme.box.normal, theme.box.focus, theme.danger);
      return _react2['default'].createElement(
        'box',
        { shrink: true, shadow: true, ref: 'box', position: { left: 'center', top: 'center', height: 8 }, border: 'line', style: styles },
        _react2['default'].createElement('text', {
          position: { top: 1 },
          height: 2,
          style: styles,
          content: ' Are you sure you want to remove server [' + server.client + ' - ' + server.name + ']? '
        }),
        _react2['default'].createElement(
          'box',
          { position: { left: 'center', bottom: 1, height: 1, width: 10 }, style: styles },
          _react2['default'].createElement('button', {
            shrink: true, mouse: true, keys: true, input: true,
            position: { left: 0, bottom: 0 },
            content: ' Yes ',
            style: theme.button,
            onKeypress: this.handleKeypress.bind(this),
            onPress: this.onPress.bind(this, 'yes')
          }),
          _react2['default'].createElement('button', {
            shrink: true, mouse: true, keys: true, focused: true,
            position: { left: 6, bottom: 0 },
            content: ' No ',
            style: theme.button,
            onKeypress: this.handleKeypress.bind(this),
            onPress: this.onPress.bind(this, 'no')
          })
        )
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      dispatch: _react.PropTypes.func.isRequired,
      params: _react.PropTypes.object.isRequired,
      items: _react.PropTypes.array.isRequired
    },
    enumerable: true
  }, {
    key: 'contextTypes',
    value: {
      history: _react.PropTypes.object.isRequired,
      theme: _react.PropTypes.object.isRequired
    },
    enumerable: true
  }]);

  return ServerRemove;
})(_react.Component);

exports['default'] = (0, _reactRedux.connect)(function (state) {
  return state.servers;
})(ServerRemove);
module.exports = exports['default'];