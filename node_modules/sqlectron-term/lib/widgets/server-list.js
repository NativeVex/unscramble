'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _extends = require('babel-runtime/helpers/extends')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var ServerList = (function (_Component) {
  _inherits(ServerList, _Component);

  function ServerList() {
    _classCallCheck(this, ServerList);

    _get(Object.getPrototypeOf(ServerList.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(ServerList, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.refs.list) this.refs.list.focus();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.refs.list) this.refs.list.focus();
    }
  }, {
    key: 'selected',
    value: function selected() {
      if (this.refs.list) return this.refs.list.selected;
      return 0;
    }
  }, {
    key: 'focus',
    value: function focus() {
      this.refs.list.focus();
    }
  }, {
    key: 'handleSelectItem',
    value: function handleSelectItem() {
      var _props = this.props;
      var servers = _props.servers;
      var onSelected = _props.onSelected;

      if (onSelected) {
        var list = this.refs.list;

        onSelected(servers[list.selected]);
      }
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus() {
      if (this.props.onFocus) this.props.onFocus();
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur() {
      if (this.props.onBlur) this.props.onBlur();
    }
  }, {
    key: 'handleKeypress',
    value: function handleKeypress(ch, info) {
      if (this.props.onKeypress) this.props.onKeypress(ch, info);
    }
  }, {
    key: 'render',
    value: function render() {
      var servers = this.props.servers;
      var theme = this.context.theme;

      var items = servers.map(function (server) {
        return server.name;
      });

      return _react2['default'].createElement('list', _extends({
        keys: true, mouse: true, shadow: true, scrollbar: true,
        ref: 'list',
        style: (0, _lodash.merge)({}, theme.list.normal, theme.list.focus),
        position: { left: 'center', top: 'center' },
        border: 'line',
        label: ' Server list ',
        items: items,
        onFocus: this.handleFocus.bind(this),
        onBlur: this.handleBlur.bind(this),
        onKeypress: this.handleKeypress.bind(this)
      }, { 'onSelect Item': this.handleSelectItem.bind(this) }));
    }
  }], [{
    key: 'propTypes',
    value: {
      servers: _react.PropTypes.array.isRequired,
      // events
      onFocus: _react.PropTypes.func,
      onBlur: _react.PropTypes.func,
      onKeypress: _react.PropTypes.func,
      // actions
      onSelected: _react.PropTypes.func
    },
    enumerable: true
  }, {
    key: 'contextTypes',
    value: {
      theme: _react.PropTypes.object.isRequired
    },
    enumerable: true
  }]);

  return ServerList;
})(_react.Component);

exports['default'] = ServerList;
module.exports = exports['default'];