'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _actionsServers = require('../actions/servers');

var _actionsStatus = require('../actions/status');

var _shortcuts = require('./shortcuts');

var _shortcuts2 = _interopRequireDefault(_shortcuts);

var _widgetsServerList = require('../widgets/server-list');

var _widgetsServerList2 = _interopRequireDefault(_widgetsServerList);

var ServerListContainer = (function (_Component) {
  _inherits(ServerListContainer, _Component);

  function ServerListContainer() {
    _classCallCheck(this, ServerListContainer);

    _get(Object.getPrototypeOf(ServerListContainer.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(ServerListContainer, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.handleProps(this.props);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.handleProps(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.handleProps(nextProps);
    }
  }, {
    key: 'handleProps',
    value: function handleProps(props) {
      var dispatch = props.dispatch;
      var error = props.error;
      var isFetching = props.isFetching;
      var items = props.items;

      dispatch((0, _actionsServers.fetchServersIfNeeded)());

      if (error) dispatch((0, _actionsStatus.setStatus)(error));
      if (isFetching) dispatch((0, _actionsStatus.setStatus)('Loading list of servers...'));
      if (items) {
        var _items = _slicedToArray(items, 1);

        var server = _items[0];

        dispatch((0, _actionsStatus.setStatus)(server ? server.client + ' server at ' + server.host + ':' + server.port : 'No servers found.'));
      }
    }
  }, {
    key: 'handleAdd',
    value: function handleAdd() {
      this.context.history.pushState(null, '/server/add');
    }
  }, {
    key: 'handleEdit',
    value: function handleEdit() {
      var items = this.props.items;

      if (!items.length) return;

      var selected = this.refs.serverList.selected();
      this.context.history.pushState(null, '/server/' + items[selected].id + '/edit');
    }
  }, {
    key: 'handleRemove',
    value: function handleRemove() {
      var items = this.props.items;

      if (!items.length) return;

      var selected = this.refs.serverList.selected();
      this.context.history.pushState(null, '/server/' + items[selected].id + '/remove');
    }
  }, {
    key: 'handleConnect',
    value: function handleConnect() {
      var items = this.props.items;

      if (!items.length) return;

      var selected = this.refs.serverList.selected();
      var server = items[selected];

      var route = '/server/' + server.id + '/database/' + server.database;
      this.context.history.pushState(null, route);
    }
  }, {
    key: 'handleSelected',
    value: function handleSelected(server) {
      var host = server.host ? server.host + ':' + server.port : server.socketPath;
      this.props.dispatch((0, _actionsStatus.setStatus)(server.client + ' server at ' + host));
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props;
      var isFetching = _props.isFetching;
      var items = _props.items;
      var error = _props.error;

      if (error || isFetching) return _react2['default'].createElement('element', { hidden: true });

      return _react2['default'].createElement(
        _shortcuts2['default'],
        { items: [{ key: 'a', label: 'Add new', handler: this.handleAdd.bind(this) }, { key: 'e', label: 'Edit', handler: this.handleEdit.bind(this) }, { key: 'r', label: 'Remove', handler: this.handleRemove.bind(this) }, { key: 'return', label: 'Connect', handler: this.handleConnect.bind(this) }] },
        _react2['default'].createElement(_widgetsServerList2['default'], {
          ref: 'serverList',
          servers: items,
          onSelected: this.handleSelected.bind(this)
        })
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      children: _react.PropTypes.node,
      dispatch: _react.PropTypes.func.isRequired,

      isFetching: _react.PropTypes.bool.isRequired,
      error: _react.PropTypes.any,
      items: _react.PropTypes.array
    },
    enumerable: true
  }, {
    key: 'contextTypes',
    value: {
      history: _react.PropTypes.object.isRequired
    },
    enumerable: true
  }]);

  return ServerListContainer;
})(_react.Component);

exports['default'] = (0, _reactRedux.connect)(function (state) {
  return state.servers;
})(ServerListContainer);
module.exports = exports['default'];