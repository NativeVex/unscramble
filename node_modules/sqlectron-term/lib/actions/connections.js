'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.connectIfNeeded = connectIfNeeded;

var _sqlectronCore = require('sqlectron-core');

var DB_CONNECT_REQUEST = 'DB_CONNECT_REQUEST';
exports.DB_CONNECT_REQUEST = DB_CONNECT_REQUEST;
var DB_CONNECT_SUCCESS = 'DB_CONNECT_SUCCESS';
exports.DB_CONNECT_SUCCESS = DB_CONNECT_SUCCESS;
var DB_CONNECT_FAILURE = 'DB_CONNECT_FAILURE';

exports.DB_CONNECT_FAILURE = DB_CONNECT_FAILURE;

function connectIfNeeded(serverId, database) {
  return function (dispatch, getState) {
    if (shouldConnect(serverId, database, getState())) {
      return dispatch(connect(serverId, database));
    }
  };
}

function shouldConnect(serverId, database, state) {
  var connections = state.connections;

  if (!connections) return true;
  if (!connections.server) return true;
  if (connections.isConnecting) return false;
  if (connections.server.id !== serverId || connections.database !== database) {
    return true;
  }

  return state.connections.didInvalidate;
}

function connect(serverId, database) {
  var _this = this;

  return function callee$1$0(dispatch, getState) {
    var _getState, servers, server;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          _getState = getState();
          servers = _getState.servers;
          server = servers.items.find(function (item) {
            return item.id === serverId;
          });

          dispatch({ type: DB_CONNECT_REQUEST, server: server, database: database });
          context$2$0.prev = 4;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_sqlectronCore.db.connect(server, database));

        case 7:
          dispatch({ type: DB_CONNECT_SUCCESS, server: server, database: database });
          context$2$0.next = 13;
          break;

        case 10:
          context$2$0.prev = 10;
          context$2$0.t0 = context$2$0['catch'](4);

          dispatch({ type: DB_CONNECT_FAILURE, server: server, database: database, error: context$2$0.t0 });

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[4, 10]]);
  };
}