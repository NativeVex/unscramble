'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _actionsTables = require('../actions/tables');

var _actionsQueries = require('../actions/queries');

var _actionsStatus = require('../actions/status');

var _shortcuts = require('./shortcuts');

var _shortcuts2 = _interopRequireDefault(_shortcuts);

var _widgetsTableList = require('../widgets/table-list');

var _widgetsTableList2 = _interopRequireDefault(_widgetsTableList);

var _widgetsTextarea = require('../widgets/textarea');

var _widgetsTextarea2 = _interopRequireDefault(_widgetsTextarea);

var _widgetsQueryResults = require('../widgets/query-results');

var _widgetsQueryResults2 = _interopRequireDefault(_widgetsQueryResults);

var Database = (function (_Component) {
  _inherits(Database, _Component);

  function Database() {
    _classCallCheck(this, Database);

    _get(Object.getPrototypeOf(Database.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(Database, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.props.dispatch((0, _actionsTables.fetchTablesIfNeeded)());
      this.handleEvents(this.props);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.refs.tableList.focus();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.handleEvents(nextProps);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this.refs.tableList.focus();
    }
  }, {
    key: 'handleEvents',
    value: function handleEvents(_ref) {
      var tables = _ref.tables;
      var query = _ref.query;
      var dispatch = this.props.dispatch;

      if (tables.error) return dispatch((0, _actionsStatus.setStatus)(tables.error));
      if (tables.isFetching) return dispatch((0, _actionsStatus.setStatus)('Loading list of tables...'));
      if (query.isExecuting) return dispatch((0, _actionsStatus.setStatus)('Executing query...'));
      if (query.error) return dispatch((0, _actionsStatus.setStatus)(query.error));

      dispatch((0, _actionsStatus.clearStatus)());
    }
  }, {
    key: 'handleExecuteQuery',
    value: function handleExecuteQuery() {
      var query = this.refs.queryArea.getValue();
      this.props.dispatch((0, _actionsQueries.executeQueryIfNeeded)(query));
    }
  }, {
    key: 'handleSelectTable',
    value: function handleSelectTable() {
      var _props = this.props;
      var tables = _props.tables;
      var connections = _props.connections;

      if (!tables.items.length) return;

      var selected = this.refs.tableList.selected();
      var item = tables.items[selected];

      var query = undefined;
      switch (connections.server.client) {
        case 'postgresql':
          query = 'select * from "' + item + '" limit 1000';
          break;
        case 'mysql':
          query = 'select * from `' + item + '` limit 1000';
          break;
        default:
          query = 'select * from ' + item + ' limit 1000';
      }

      this.props.dispatch((0, _actionsQueries.executeQueryIfNeeded)(query));
    }
  }, {
    key: 'handleChangeDatabase',
    value: function handleChangeDatabase() {
      var _props$params = this.props.params;
      var id = _props$params.id;
      var database = _props$params.database;

      var route = '/server/' + id + '/database/' + database + '/databases';
      this.context.history.pushState(null, route);
    }
  }, {
    key: 'handleListServers',
    value: function handleListServers() {
      this.context.history.pushState(null, '/server/list');
    }
  }, {
    key: 'handleClearQuery',
    value: function handleClearQuery() {
      this.refs.queryArea.setValue('');
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props;
      var tables = _props2.tables;
      var query = _props2.query;
      var theme = this.context.theme;

      var tableListShortcuts = [{ key: 'return', label: 'Select', handler: this.handleSelectTable.bind(this) }, { key: 'c', label: 'Change database', handler: this.handleChangeDatabase.bind(this) }, { key: 's', label: 'List servers', handler: this.handleListServers.bind(this) }];
      var queryAreaShortcuts = [{ key: 'C-c', label: 'Clear', handler: this.handleClearQuery.bind(this) }, { key: 'C-e', label: 'Editor' }, { key: 'C-x', label: 'Execute', handler: this.handleExecuteQuery.bind(this) }];
      var queryResultsShortcuts = [{ key: 'C-e', label: 'Editor' }];

      return _react2['default'].createElement(
        'box',
        { shadow: true, position: { top: 1, left: 1, bottom: 2, right: 3 } },
        _react2['default'].createElement(
          'box',
          { position: { left: 0, top: 0, bottom: 0, width: 30 } },
          _react2['default'].createElement(
            _shortcuts2['default'],
            { items: tableListShortcuts },
            _react2['default'].createElement(_widgetsTableList2['default'], { ref: 'tableList', items: tables.items })
          )
        ),
        _react2['default'].createElement(
          'box',
          { position: { left: 30, top: 0, right: 0, height: 5 } },
          _react2['default'].createElement(
            _shortcuts2['default'],
            { items: queryAreaShortcuts },
            _react2['default'].createElement(_widgetsTextarea2['default'], { ref: 'queryArea', defaultValue: query.query })
          ),
          _react2['default'].createElement('text', { position: { top: 0, left: 2 }, style: theme.box.normal, content: ' Query ' })
        ),
        _react2['default'].createElement(
          'box',
          { position: { left: 30, top: 5, bottom: 0, right: 0 } },
          _react2['default'].createElement(
            _shortcuts2['default'],
            { items: queryResultsShortcuts },
            _react2['default'].createElement(_widgetsQueryResults2['default'], { ref: 'queryResults', result: query.result })
          )
        )
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      dispatch: _react.PropTypes.func.isRequired,

      params: _react.PropTypes.object.isRequired,

      connections: _react.PropTypes.any,
      tables: _react.PropTypes.any,
      query: _react.PropTypes.any
    },
    enumerable: true
  }, {
    key: 'contextTypes',
    value: {
      history: _react.PropTypes.object.isRequired,
      theme: _react.PropTypes.object.isRequired
    },
    enumerable: true
  }]);

  return Database;
})(_react.Component);

function mapStateToProps(state) {
  return {
    connections: state.connections,
    tables: state.tables,
    query: state.queries
  };
}

exports['default'] = (0, _reactRedux.connect)(mapStateToProps)(Database);
module.exports = exports['default'];