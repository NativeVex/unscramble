'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.executeQueryIfNeeded = executeQueryIfNeeded;

var _sqlectronCore = require('sqlectron-core');

var DB_EXECUTE_QUERY_REQUEST = 'DB_EXECUTE_QUERY_REQUEST';
exports.DB_EXECUTE_QUERY_REQUEST = DB_EXECUTE_QUERY_REQUEST;
var DB_EXECUTE_QUERY_SUCCESS = 'DB_EXECUTE_QUERY_SUCCESS';
exports.DB_EXECUTE_QUERY_SUCCESS = DB_EXECUTE_QUERY_SUCCESS;
var DB_EXECUTE_QUERY_FAILURE = 'DB_EXECUTE_QUERY_FAILURE';

exports.DB_EXECUTE_QUERY_FAILURE = DB_EXECUTE_QUERY_FAILURE;

function executeQueryIfNeeded(query) {
  return function (dispatch, getState) {
    if (shouldExecuteQuery(query, getState())) {
      return dispatch(executeQuery(query));
    }
  };
}

function shouldExecuteQuery(query, state) {
  if (!state.query) return true;
  if (state.query.isExecuting) return false;
  if (state.query.query !== query) return true;
  return state.query.didInvalidate;
}

function executeQuery(query) {
  var _this = this;

  return function callee$1$0(dispatch) {
    var result;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          dispatch({ type: DB_EXECUTE_QUERY_REQUEST, query: query });
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(_sqlectronCore.db.executeQuery(query));

        case 4:
          result = context$2$0.sent;

          dispatch({ type: DB_EXECUTE_QUERY_SUCCESS, query: query, result: result });
          context$2$0.next = 11;
          break;

        case 8:
          context$2$0.prev = 8;
          context$2$0.t0 = context$2$0['catch'](1);

          dispatch({ type: DB_EXECUTE_QUERY_FAILURE, query: query, error: context$2$0.t0 });

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[1, 8]]);
  };
}