'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getConfigPath = getConfigPath;
exports.homedir = homedir;
exports.fileExists = fileExists;
exports.writeFile = writeFile;
exports.writeJSONFile = writeJSONFile;
exports.readFile = readFile;
exports.readJSONFile = readJSONFile;
exports.getPort = getPort;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _portfinder = require('portfinder');

var _portfinder2 = _interopRequireDefault(_portfinder);

function getConfigPath() {
  return _path2['default'].join(homedir(), '.sqlectron.json');
}

function homedir() {
  return process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'];
}

function fileExists(filename) {
  return new Promise(function (resolve) {
    _fs2['default'].stat(filename, function (err, stats) {
      if (err) return resolve(false);
      resolve(stats.isFile());
    });
  });
}

function writeFile(filename, data) {
  return new Promise(function (resolve, reject) {
    _fs2['default'].writeFile(filename, data, function (err) {
      if (err) return reject(err);
      resolve();
    });
  });
}

function writeJSONFile(filename, data) {
  return writeFile(filename, JSON.stringify(data, null, 2));
}

function readFile(filename) {
  var filePath = resolveHomePathToAbsolute(filename);
  return new Promise(function (resolve, reject) {
    _fs2['default'].readFile(_path2['default'].resolve(filePath), function (err, data) {
      if (err) return reject(err);
      resolve(data);
    });
  });
}

function readJSONFile(filename) {
  return readFile(filename).then(function (data) {
    return JSON.parse(data);
  });
}

function resolveHomePathToAbsolute(filename) {
  if (!/^~\//.test(filename)) {
    return filename;
  }

  return _path2['default'].join(homedir(), filename.substring(2));
}

function getPort() {
  return new Promise(function (resolve, reject) {
    _portfinder2['default'].getPort({ host: '127.0.0.1' }, function (err, port) {
      if (err) return reject(err);
      resolve(port);
    });
  });
}