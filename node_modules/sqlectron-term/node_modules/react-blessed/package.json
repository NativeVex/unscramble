{
  "_args": [
    [
      {
        "raw": "react-blessed@https://registry.npmjs.org/react-blessed/-/react-blessed-0.1.7.tgz",
        "scope": null,
        "escapedName": "react-blessed",
        "name": "react-blessed",
        "rawSpec": "https://registry.npmjs.org/react-blessed/-/react-blessed-0.1.7.tgz",
        "spec": "https://registry.npmjs.org/react-blessed/-/react-blessed-0.1.7.tgz",
        "type": "remote"
      },
      "/home/ec2-user/unscramble/unscramble/node_modules/sqlectron-term"
    ]
  ],
  "_from": "react-blessed@^0.1.7",
  "_id": "react-blessed@0.1.7",
  "_inCache": true,
  "_location": "/sqlectron-term/react-blessed",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-blessed@https://registry.npmjs.org/react-blessed/-/react-blessed-0.1.7.tgz",
    "scope": null,
    "escapedName": "react-blessed",
    "name": "react-blessed",
    "rawSpec": "https://registry.npmjs.org/react-blessed/-/react-blessed-0.1.7.tgz",
    "spec": "https://registry.npmjs.org/react-blessed/-/react-blessed-0.1.7.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/sqlectron-term"
  ],
  "_resolved": "https://registry.npmjs.org/react-blessed/-/react-blessed-0.1.7.tgz",
  "_shasum": "1f50c6a9f9ac362b4e52fc258051c9393e5917a5",
  "_shrinkwrap": null,
  "_spec": "react-blessed@https://registry.npmjs.org/react-blessed/-/react-blessed-0.1.7.tgz",
  "_where": "/home/ec2-user/unscramble/unscramble/node_modules/sqlectron-term",
  "author": {
    "name": "yomguithereal"
  },
  "bugs": {
    "url": "https://github.com/yomguithereal/react-blessed/issues"
  },
  "dependencies": {
    "invariant": "^2.1.0",
    "lodash": "^3.6.0"
  },
  "description": "A react renderer for blessed.",
  "devDependencies": {
    "babel": "^5.8.3",
    "blessed": "^0.1.14",
    "mocha": "^2.0.1",
    "react": "^0.14.0"
  },
  "homepage": "https://github.com/yomguithereal/react-blessed#readme",
  "keywords": [
    "blessed",
    "react",
    "renderer",
    "cli",
    "interface"
  ],
  "license": "MIT",
  "main": "./dist/render.js",
  "name": "react-blessed",
  "optionalDependencies": {},
  "readme": "# react-blessed\n\nA [React](https://facebook.github.io/react/) custom renderer for the [blessed](https://github.com/chjj/blessed) library.\n\nThis renderer should currently be considered as experimental, is subject to change and will only work with the React's latest version (`0.14.x`).\n\n![demo](https://raw.githubusercontent.com/Yomguithereal/react-blessed/master/img/demo.gif)\n\n## Summary\n\n* [Installation](#installation)\n* [Demo](#demo)\n* [Usage](#usage)\n  * [Rendering a basic application](#rendering-a-basic-application)\n  * [Nodes & text nodes](#nodes--text-nodes)\n  * [Refs](#refs)\n  * [Events](#events)\n  * [Classes](#classes)\n* [Roadmap](#roadmap)\n* [Contribution](#contribution)\n* [License](#license)\n\n## Installation\n\nYou can install `react-blessed` through npm:\n\n```bash\n# Be sure to install react>=0.14.0 & blessed>=0.1.81 before\nnpm install react@0.14.0 blessed\nnpm install react-blessed\n```\n\n## Demo\n\nFor a quick demo of what you could achieve with such a renderer you can clone this repository and check some of the examples:\n\n```bash\ngit clone https://github.com/Yomguithereal/react-blessed\ncd react-blessed\nnpm install\n\n# Some examples (code is in `examples/`)\nnpm run demo\nnpm run dashboard\nnpm run animation\n```\n\nYou may also check out [react-blessed-hot-motion](https://github.com/gaearon/react-blessed-hot-motion) for a demo that uses [React Motion](https://github.com/chenglou/react-motion) for animation, and Webpack with [React Transform Babel plugin](https://github.com/gaearon/babel-plugin-react-transform/) for live editing.\n\n## Usage\n\n### Rendering a basic application\n\n```jsx\nimport React, {Component} from 'react';\nimport blessed from 'blessed';\nimport {render} from 'react-blessed';\n\n// Rendering a simple centered box\nclass App extends Component {\n  render() {\n    return (\n      <box top=\"center\"\n           left=\"center\"\n           width=\"50%\"\n           height=\"50%\"\n           border={{type: 'line'}}\n           style={{border: {fg: 'blue'}}}>\n        Hello World!\n      </box>\n    );\n  }\n}\n\n// Creating our screen\nconst screen = blessed.screen({\n  autoPadding: true,\n  smartCSR: true,\n  title: 'react-blessed hello world'\n});\n\n// Adding a way to quit the program\nscreen.key(['escape', 'q', 'C-c'], function(ch, key) {\n  return process.exit(0);\n});\n\n// Rendering the React app using our screen\nconst component = render(<App />, screen);\n```\n\n### Nodes & text nodes\n\nAny of the blessed [widgets](https://github.com/chjj/blessed#widgets) can be renderered through `react-blessed` by using a lowercased tag title.\n\nText nodes, on the other hand, will be rendered by applying the `setContent` method with the given text on the parent node.\n\n### Refs\n\nAs with React's DOM renderer, `react-blessed` lets you handle the original blessed nodes, if you ever need them, through refs.\n\n```jsx\nclass CustomList extends Component {\n  componentDidMount() {\n\n    // Focus on the first box\n    this.refs.first.focus();\n  }\n\n  render() {\n    return (\n      <element>\n        <box ref=\"first\">\n          First box.\n        </box>\n        <box ref=\"second\">\n          Second box.\n        </box>\n      </element>\n    );\n  }\n}\n```\n\n### Events\n\nAny blessed node event can be caught through a `on`-prefixed listener:\n\n```jsx\nclass Completion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {progress: 0, color: 'blue'};\n\n    const interval = setInterval(() => {\n      if (this.state.progress >= 100)\n        return clearInterval(interval);\n\n      this.setState({progress: this.state.progress + 1});\n    }, 50);\n  }\n\n  render() {\n    const {progress} = this.state,\n          label = `Progress - ${progress}%`;\n\n    // See the `onComplete` prop\n    return <progressbar label={label}\n                        onComplete={() => this.setState({color: 'green'})}\n                        filled={progress}\n                        style={{bar: {bg: this.state.color}}} />;\n  }\n}\n```\n\n### Classes\n\nFor convenience, `react-blessed` lets you handle classes looking like what [react-native](https://facebook.github.io/react-native/docs/style.html#content) proposes.\n\nJust pass object or an array of objects as the class of your components likewise:\n\n```jsx\n// Let's say we want all our elements to have a fancy blue border\nconst stylesheet = {\n  bordered: {\n    border: {\n      type: 'line'\n    },\n    style: {\n      border: {\n        fg: 'blue'\n      }\n    }\n  }\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <element>\n        <box class={stylesheet.bordered}>\n          First box.\n        </box>\n        <box class={stylesheet.bordered}>\n          Second box.\n        </box>\n      </element>\n    );\n  }\n}\n```\n\nYou can of course combine classes (note that the given array of classes will be compacted):\n```jsx\n// Let's say we want all our elements to have a fancy blue border\nconst stylesheet = {\n  bordered: {\n    border: {\n      type: 'line'\n    },\n    style: {\n      border: {\n        fg: 'blue'\n      }\n    }\n  },\n  magentaBackground: {\n    style: {\n      bg: 'magenta'\n    }\n  }\n};\n\nclass App extends Component {\n  render() {\n\n    // If this flag is false, then the class won't apply to the second box\n    const backgroundForSecondBox = this.props.backgroundForSecondBox;\n\n    return (\n      <element>\n        <box class={[stylesheet.bordered, stylesheet.magentaBackground]}>\n          First box.\n        </box>\n        <box class={[\n          stylesheet.bordered,\n          backgroundForSecondBox && stylesheet.magentaBackground\n        ]}>\n          Second box.\n        </box>\n      </element>\n    );\n  }\n}\n```\n\n## Roadmap\n\n* Full support (meaning every tags and options should be handled by the renderer).\n* `react-blessed-contrib` to add some sugar over the [blessed-contrib](https://github.com/yaronn/blessed-contrib) library (probably through full-fledged components).\n\n## Contribution\n\nContributions are obviously welcome.\n\nBe sure to add unit tests if relevant and pass them all before submitting your pull request.\n\n```bash\n# Installing the dev environment\ngit clone git@github.com:Yomguithereal/react-blessed.git\ncd react-blessed\nnpm install\n\n# Running the tests\nnpm test\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yomguithereal/react-blessed.git"
  },
  "scripts": {
    "animation": "babel-node ./examples/animation.jsx",
    "build": "babel ./src --out-dir ./dist",
    "dashboard": "babel-node ./examples/dashboard.jsx",
    "demo": "babel-node ./examples/demo.jsx",
    "prepublish": "npm run build",
    "test": "mocha -R spec --compilers js:babel/register ./test/endpoint.js"
  },
  "version": "0.1.7"
}
