'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.fetchDatabasesIfNeeded = fetchDatabasesIfNeeded;

var _sqlectronCore = require('sqlectron-core');

var DB_FETCH_DATABASES_REQUEST = 'DB_FETCH_DATABASES_REQUEST';
exports.DB_FETCH_DATABASES_REQUEST = DB_FETCH_DATABASES_REQUEST;
var DB_FETCH_DATABASES_SUCCESS = 'DB_FETCH_DATABASES_SUCCESS';
exports.DB_FETCH_DATABASES_SUCCESS = DB_FETCH_DATABASES_SUCCESS;
var DB_FETCH_DATABASES_FAILURE = 'DB_FETCH_DATABASES_FAILURE';

exports.DB_FETCH_DATABASES_FAILURE = DB_FETCH_DATABASES_FAILURE;

function fetchDatabasesIfNeeded() {
  return function (dispatch, getState) {
    if (shouldFetchDatabases(getState())) {
      return dispatch(fetchDatabases());
    }
  };
}

function shouldFetchDatabases(state) {
  var databases = state.databases;
  if (!databases) return true;
  if (databases.isFetching) return false;
  return databases.didInvalidate;
}

function fetchDatabases() {
  var _this = this;

  return function callee$1$0(dispatch) {
    var databases;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          dispatch({ type: DB_FETCH_DATABASES_REQUEST });
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(_sqlectronCore.db.listDatabases());

        case 4:
          databases = context$2$0.sent;

          dispatch({ type: DB_FETCH_DATABASES_SUCCESS, databases: databases });
          context$2$0.next = 11;
          break;

        case 8:
          context$2$0.prev = 8;
          context$2$0.t0 = context$2$0['catch'](1);

          dispatch({ type: DB_FETCH_DATABASES_FAILURE, error: context$2$0.t0 });

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[1, 8]]);
  };
}