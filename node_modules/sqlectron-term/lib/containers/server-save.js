'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _actionsServers = require('../actions/servers');

var _actionsStatus = require('../actions/status');

var _widgetsServerForm = require('../widgets/server-form');

var _widgetsServerForm2 = _interopRequireDefault(_widgetsServerForm);

var ServerSave = (function (_Component) {
  _inherits(ServerSave, _Component);

  function ServerSave() {
    _classCallCheck(this, ServerSave);

    _get(Object.getPrototypeOf(ServerSave.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(ServerSave, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.handleProps(null, this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.handleProps(this.props, nextProps);
    }
  }, {
    key: 'handleSubmit',
    value: function handleSubmit(server) {
      return _regeneratorRuntime.async(function handleSubmit$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.props.dispatch((0, _actionsServers.saveServer)(server)));

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'handleCancel',
    value: function handleCancel() {
      this.context.history.goBack();
    }
  }, {
    key: 'handleProps',
    value: function handleProps(prevProps, nextProps) {
      var saveSuccess = prevProps && prevProps.saveServer.isSaving && !nextProps.saveServer.isSaving && !nextProps.saveServer.error;

      if (saveSuccess) {
        this.context.history.goBack();
        return;
      }

      var shouldPrepare = !prevProps || prevProps.params.id !== nextProps.params.id;
      if (shouldPrepare) {
        var server = nextProps.params.id ? nextProps.servers.items.find(function (item) {
          return item.id === nextProps.params.id;
        }) : null;
        nextProps.dispatch((0, _actionsServers.prepareSaveServer)(server));
      }

      var editMode = nextProps.params.id ? true : false;

      if (nextProps.saveServer.error) {
        nextProps.dispatch((0, _actionsStatus.setStatus)('Failed to save server'));
        return;
      }
      if (nextProps.saveServer.isSaving) {
        nextProps.dispatch((0, _actionsStatus.setStatus)('Saving server...'));
        return;
      }
      nextProps.dispatch((0, _actionsStatus.setStatus)((editMode ? 'Edit' : 'Add') + ' server information'));
    }
  }, {
    key: 'render',
    value: function render() {
      var _props$saveServer = this.props.saveServer;
      var server = _props$saveServer.server;
      var error = _props$saveServer.error;

      return _react2['default'].createElement(
        'box',
        { shadow: true, position: { left: 'center', top: 'center', height: 21, width: 80 } },
        _react2['default'].createElement(_widgetsServerForm2['default'], {
          server: server,
          error: error,
          onSubmit: this.handleSubmit.bind(this),
          onCancel: this.handleCancel.bind(this)
        })
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      dispatch: _react.PropTypes.func.isRequired,

      params: _react.PropTypes.object.isRequired,
      servers: _react.PropTypes.object.isRequired,
      saveServer: _react.PropTypes.object.isRequired
    },
    enumerable: true
  }, {
    key: 'contextTypes',
    value: {
      history: _react.PropTypes.object.isRequired
    },
    enumerable: true
  }]);

  return ServerSave;
})(_react.Component);

exports['default'] = (0, _reactRedux.connect)(function (state) {
  return {
    servers: state.servers,
    saveServer: state.saveServer
  };
})(ServerSave);
module.exports = exports['default'];