'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.fetchTablesIfNeeded = fetchTablesIfNeeded;

var _sqlectronCore = require('sqlectron-core');

var DB_FETCH_TABLES_REQUEST = 'DB_FETCH_TABLES_REQUEST';
exports.DB_FETCH_TABLES_REQUEST = DB_FETCH_TABLES_REQUEST;
var DB_FETCH_TABLES_SUCCESS = 'DB_FETCH_TABLES_SUCCESS';
exports.DB_FETCH_TABLES_SUCCESS = DB_FETCH_TABLES_SUCCESS;
var DB_FETCH_TABLES_FAILURE = 'DB_FETCH_TABLES_FAILURE';

exports.DB_FETCH_TABLES_FAILURE = DB_FETCH_TABLES_FAILURE;

function fetchTablesIfNeeded() {
  return function (dispatch, getState) {
    if (shouldFetchTables(getState())) {
      return dispatch(fetchTables());
    }
  };
}

function shouldFetchTables(state) {
  var tables = state.tables;
  if (!tables) return true;
  if (tables.isFetching) return false;
  return tables.didInvalidate;
}

function fetchTables() {
  var _this = this;

  return function callee$1$0(dispatch) {
    var tables;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          dispatch({ type: DB_FETCH_TABLES_REQUEST });
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(_sqlectronCore.db.listTables());

        case 4:
          tables = context$2$0.sent;

          dispatch({ type: DB_FETCH_TABLES_SUCCESS, tables: tables });
          context$2$0.next = 11;
          break;

        case 8:
          context$2$0.prev = 8;
          context$2$0.t0 = context$2$0['catch'](1);

          dispatch({ type: DB_FETCH_TABLES_FAILURE, error: context$2$0.t0 });

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[1, 8]]);
  };
}