'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _actionsDatabases = require('../actions/databases');

var _actionsStatus = require('../actions/status');

var _shortcuts = require('./shortcuts');

var _shortcuts2 = _interopRequireDefault(_shortcuts);

var _widgetsDatabaseList = require('../widgets/database-list');

var _widgetsDatabaseList2 = _interopRequireDefault(_widgetsDatabaseList);

var DatabaseListContainer = (function (_Component) {
  _inherits(DatabaseListContainer, _Component);

  function DatabaseListContainer() {
    _classCallCheck(this, DatabaseListContainer);

    _get(Object.getPrototypeOf(DatabaseListContainer.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(DatabaseListContainer, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.props.dispatch((0, _actionsDatabases.fetchDatabasesIfNeeded)());
      this.handleEvents(this.props);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.refs.databaseList.focus();
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.handleEvents(nextProps);
    }
  }, {
    key: 'handleEvents',
    value: function handleEvents(_ref) {
      var error = _ref.error;
      var isFetching = _ref.isFetching;
      var dispatch = this.props.dispatch;

      if (error) return dispatch((0, _actionsStatus.setStatus)(error));
      if (isFetching) return dispatch((0, _actionsStatus.setStatus)('Loading list of databases...'));

      dispatch((0, _actionsStatus.clearStatus)());
    }
  }, {
    key: 'handleSelect',
    value: function handleSelect() {
      var _props = this.props;
      var items = _props.items;
      var params = _props.params;

      if (!items.length) return;

      var selected = this.refs.databaseList.selected();
      var database = items[selected];

      var route = '/server/' + params.id + '/database/' + database;
      this.context.history.pushState(null, route);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props;
      var isFetching = _props2.isFetching;
      var items = _props2.items;
      var error = _props2.error;

      var shortcuts = [{ key: 'return', label: 'Select', handler: this.handleSelect.bind(this) }];

      if (error || isFetching) return _react2['default'].createElement('element', { hidden: true });

      return _react2['default'].createElement(
        _shortcuts2['default'],
        { items: shortcuts },
        _react2['default'].createElement(_widgetsDatabaseList2['default'], { ref: 'databaseList', items: items })
      );
    }
  }], [{
    key: 'propTypes',
    value: {
      dispatch: _react.PropTypes.func.isRequired,

      children: _react.PropTypes.node,
      params: _react.PropTypes.object.isRequired,

      isFetching: _react.PropTypes.bool,
      items: _react.PropTypes.array,
      error: _react.PropTypes.any
    },
    enumerable: true
  }, {
    key: 'contextTypes',
    value: {
      history: _react.PropTypes.object.isRequired
    },
    enumerable: true
  }]);

  return DatabaseListContainer;
})(_react.Component);

exports['default'] = (0, _reactRedux.connect)(function (state) {
  return state.databases;
})(DatabaseListContainer);
module.exports = exports['default'];