'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.connect = connect;
exports.listTables = listTables;
exports.executeQuery = executeQuery;
exports.listDatabases = listDatabases;
exports.getQuerySelectTop = getQuerySelectTop;
var connecting = false;
var connection = null;

function connect(serverInfo, databaseName) {
  var driver;
  return regeneratorRuntime.async(function connect$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!connecting) {
          context$1$0.next = 2;
          break;
        }

        throw new Error('connecting to server');

      case 2:
        context$1$0.prev = 2;

        connecting = true;

        if (connection) connection.disconnect();

        driver = require('./clients/' + serverInfo.client)['default'];
        context$1$0.next = 8;
        return regeneratorRuntime.awrap(driver(serverInfo, databaseName));

      case 8:
        connection = context$1$0.sent;
        context$1$0.next = 14;
        break;

      case 11:
        context$1$0.prev = 11;
        context$1$0.t0 = context$1$0['catch'](2);
        throw context$1$0.t0;

      case 14:
        context$1$0.prev = 14;

        connecting = false;
        return context$1$0.finish(14);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 11, 14, 17]]);
}

function listTables() {
  return regeneratorRuntime.async(function listTables$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _checkIsConnected();
        context$1$0.next = 3;
        return regeneratorRuntime.awrap(connection.listTables());

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function executeQuery(query) {
  return regeneratorRuntime.async(function executeQuery$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _checkIsConnected();
        context$1$0.next = 3;
        return regeneratorRuntime.awrap(connection.executeQuery(query));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function listDatabases() {
  return regeneratorRuntime.async(function listDatabases$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _checkIsConnected();
        context$1$0.next = 3;
        return regeneratorRuntime.awrap(connection.listDatabases());

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getQuerySelectTop(table) {
  var limit = arguments.length <= 1 || arguments[1] === undefined ? 1000 : arguments[1];

  _checkIsConnected();
  return connection.getQuerySelectTop(table, limit);
}

function _checkIsConnected() {
  if (connecting || !connection) {
    throw new Error('connecting to server');
  }
}